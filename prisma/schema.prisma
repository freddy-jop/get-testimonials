// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// App Model

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  plan          Plan      @default(FREE)

  accounts Account[]
  sessions Session[]
  Products Product[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Plan {
  FREE
  PREMIUM
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Product {
  id              String   @id @default(cuid())
  slug            String   @unique
  name            String
  image           String?
  noteText        String?
  informationText String?
  reviewText      String?
  thanksText      String?
  backgroundColor String?
  enabled         Boolean  @default(true)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  Reviews         Review[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Review {
  id         String      @id @default(cuid())
  rating     Int
  text       String?
  ip         String
  // Audio Url
  audio      String?
  socialLink String?
  SocialType SocialType?
  //Image and name getting from social
  name       String?
  image      String?
  productId  String
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updated   DateTime @updatedAt
}

enum SocialType {
  LINKEDIN
  TWITTER
}
